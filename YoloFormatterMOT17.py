import cv2 as cv
from tqdm import tqdm
import threading
import random
import time
import sys
import os

from imgstream import ImgStream
from dataset import dataset_train as dataset

USER_INPUT_LEN = 5
CONFIG = {
    'IMG_640x640': {
        'dir' : 'letterbox_640x640',
        'size' : 640,
        'stride' : 32,
        },
    'IMG_480x480' : {
        'dir' : 'letterbox_480x480',
        'size' : 480,
        'stride' : 32
        }
} 

DIR_FORMATS = {
    'MOT17' : 0,
    'KITTI' : 1,
}

YOLO_DIRS = ['train', 'val', 'test']
ZERO_PADDING = [114, 114, 114]
TRAIN_PERCENTAGE = 0.8

img_path_global = ''

def create_target_path(src_file, target_path, tov, config):

    global img_path_global
    
    aux = src_file.split("/")
    file_name = aux[-3] + aux[-2] +  aux[-1]

    root_dir = target_path + '/' + config['dir']
    img_path = root_dir + '/images/' + tov + '/'  + file_name
    label_path = root_dir + '/labels/' + tov + '/' + file_name.split(".")[0] + '.txt'

    return img_path, label_path

def __letterbox__(ratio, config):
    yolo_sz = config['size']
    yolo_stride = config['stride']

    new_hw = int(yolo_sz / ratio)
    padding_pixels = int(yolo_sz - new_hw)
    padding_pixels = padding_pixels % yolo_stride

    margin0 = int(padding_pixels / 2)
    margin1 = margin0 + (padding_pixels & 1)

    return yolo_sz, new_hw, margin0, margin1 

def letterbox_dim(shape, config):
    ratio = shape[1]/shape[0]
    
    new_dim = __letterbox__(ratio, config)

    if ratio > 1:
        return (new_dim[0], new_dim[1]), new_dim[2], new_dim[3], 0, 0
    
    return (new_dim[1], new_dim[0]), 0, 0, new_dim[2], new_dim[3]
    
def process_image2(dst_path, canvas, artwork, new_dims, src_path):
    img = cv.imread(src_path, cv.IMREAD_COLOR)
    cv.resize(src=img, dsize=new_dims, dst=artwork)
    cv.imwrite(dst_path, canvas)

def resize_bbox(bbox, imgW, imgH):
    left, top, width, height = bbox
    xc = (left + width / 2.) / imgW
    yc = (top + height / 2.) / imgH

    if xc > 1: 
        xc = 1.0
        width = imgW - left

    elif xc < 0:
        xc = 0.0
        width = width + left
    
    if yc > 1: 
        yc = 1.0
        height = imgH - top

    elif yc < 0: 
        yc = 0.0
        height = height + top
    
    if width > imgW: 
        width = imgW
    if height > imgH: 
        height = imgH

    return xc, yc, width/imgW, height/imgH
        

def process_bbox(path, bbox_set, img_dim):
    _, _, imgH, imgW = img_dim

    fd = open(path, 'w')

    for bbox in bbox_set:
        xc, yc, width, height = resize_bbox(bbox[:4], imgW, imgH)
        fd.write(f"{int(bbox[-1])} {xc:.06f} {yc:.6f} {width:.6f} {height:.6f}\n")

    fd.close()

def process_dataset2(dataset_format, dataset_path, new_path, config):
    stream = ImgStream(dataset_path, dataset_format)
    canvas, artwork, meta_dims = stream.imgalloc(config['size'], stride=config['stride'])

    for bbox, src_path in stream.framePath():
        tov = "train" if random.random() < TRAIN_PERCENTAGE else "val"
        img_path, label_path = create_target_path(src_path, new_path, tov, config)
        process_image2(img_path, canvas, artwork, meta_dims[4:], src_path)
        process_bbox(label_path, bbox, meta_dims[:4])

def create_yaml(root_dir, config, meta):
    path = f"{root_dir}/{config['dir']}"

    yaml_content = \
f"#\n" \
f"# YOLO Dataset Configuration for {meta['dataset']}\n" \
f"#\n" \
f"# Auto-generated by YoloFormatterMOT17\n" \
f"#\n" \
f"#   Author: C. Alvarado @ https://github.com/ckevar\n" \
f"#   Date: {time.asctime()}\n" \
f"#\n" \
f"# Configuration:\n" \
f"#   image_size: {config['size']}x{config['size']}\n" \
f"#   nc: {meta['nc']}\n" \
f"#\n" \
f"path: {path}\n" \
f"{YOLO_DIRS[0]}: images/{YOLO_DIRS[0]}\n" \
f"{YOLO_DIRS[1]}: images/{YOLO_DIRS[1]}\n" \
f"{YOLO_DIRS[2]}: images/{YOLO_DIRS[2]}\n" \
f"\n" \
f"names:\n"
    
    for name in meta['names']:
        yaml_content += f"    {meta['names'][name]}: {name.decode('utf-8')}\n"

    fd = open(path + '/data.yaml', 'w')
    fd.write(yaml_content)
    fd.close()
    
def main(dir_format, root_dir, dest_dir, config):
    dataset_request = dataset[dir_format]['paths']
    
    for ds in tqdm(dataset_request):
        process_dataset2(dir_format, root_dir + '/' + ds, dest_dir, config)

    create_yaml(dest_dir, config, dataset[dir_format]['meta'])

def _make_directory_(target_dir):
    try:
        os.makedirs(target_dir)
    except FileExistsError:
        pass
    except Exception as e:
        print("\n  Something went wrong when creating images dir.", e)
        exit()

def mkdirs(root_dir, out_dir):
    base_dir = root_dir + '/' + out_dir

    if os.path.exists(base_dir):
        '''
        For security reasons, we aren't removing the output directory
        automatically.
        '''
        print("\n"\
              "  Warning: Remove the output directory to avoid data\n" \
              "           duplication {}, run:\n"\
              "\n"\
              "           rm -r {}\n".format(base_dir, base_dir))
        exit()

    images_dir = base_dir + '/images'
    labels_dir = base_dir + '/labels'

    for yd in YOLO_DIRS:
        _make_directory_(images_dir + '/' + yd)
        _make_directory_(labels_dir + '/' + yd)
 
def init(root_dir, config):
    random.seed(time.time())
    mkdirs(root_dir, config['dir'])

def parse_user_input(argv):
    configs = list(CONFIG.keys())
    args = int(len(argv))
    dir_formats = list(DIR_FORMATS.keys())
    
    if (args < USER_INPUT_LEN) or (argv[4] not in configs):
        print(f"\nusage: python3 {argv[0]} <src dir> <dst dir> <imgsz>\n"\
              f"  dir format : {dir_formats}\n"
              "  src dir    : directory of the dataset dataset\n"\
              "  dst dir    : directory for the YOLO formatted dataset\n"\
              f"  imgsz      : {configs}\n")
        exit()
    return argv[1], argv[2], argv[3], CONFIG[argv[4]]

if "__main__" == __name__:
    dir_format, src_dir, dest_dir, config = parse_user_input(sys.argv)
    init(dest_dir, config)
    main(dir_format, src_dir, dest_dir, config)

